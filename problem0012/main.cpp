// The sequence of triangle numbers is generated by adding the natural numbers. 
// So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
//
// 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
//
// Let us list the factors of the first seven triangle numbers:
//
//      1: 1
//      3: 1,3
//      6: 1,2,3,6
//     10: 1,2,5,10
//     15: 1,3,5,15
//     21: 1,3,7,21
//     28: 1,2,4,7,14,28
//
// We can see that 28 is the first triangle number to have over five divisors.
//
// What is the value of the first triangle number to have over five hundred divisors?

#include <chrono>
#include <iostream>
#include <cmath>

typedef long long int lli;

int main(){
    auto start = std::chrono::high_resolution_clock::now();

    lli triangle, current = 1;
    
    while(true){
        //calculate next triangle number
        triangle = (lli)(0.5*current*(current+1));
        //calculate number of divisors
        lli divisors = 2; //two because of 1 and itself
        lli sqrt = std::sqrt(triangle);
        lli sqrtfl = std::floor(sqrt);
        if(sqrt == sqrtfl) divisors++;
        for(lli i = 2; i < sqrtfl; i++){
            if(triangle%i == 0) {
                divisors+=2;
            }
        }
        if(divisors > 500) break;
        current++;
    }
    auto end = std::chrono::high_resolution_clock::now();
    std::cout << "result: " << triangle << std::endl;
    std::cout << "time: " << std::chrono::duration_cast<std::chrono::milliseconds>(end - start).count() << "ms" << std::endl;

    return 0;
}